interface $typedFetch extends $fetch {
    fetch<K extends keyof $TypeMap>(type: K, urlParam: Parameters<$TypeMap[K]>[0], commonParam: Parameters<$TypeMap[K]>[1], initOpt?: RequestInit): Promise<ReturnType<$TypeMap[K]> & { message: string }>;
}

class $fetch {
    async fetch(type: string, urlParam: any, commonParam: any, initOpt?: RequestInit): Promise<any> {
        if ($Desc[type] === undefined) throw new Error("unknown endpoint");
        const desc = $Desc[type];
        desc.urlParamCheck(urlParam);
        desc.commonParamCheck(commonParam);
        let init: RequestInit = {
            method: desc.Method,
        };
        if (desc.Method == "POST") {
            init.body = JSON.stringify(commonParam);
        }
        let res = await fetch(desc.url(urlParam), Object.assign(init, initOpt));
        let ret = await res.json();
        if (ret.message === "") {
            desc.retCheck(ret);
        }
        return ret;
    }
}

const $typedFetchInstanceType = $fetch as { new(): $typedFetch; prototype: $typedFetch };
const $typedFetchInstance = new $typedFetchInstanceType();
const $fetchFn = $typedFetchInstance.fetch;
export default $fetchFn;
